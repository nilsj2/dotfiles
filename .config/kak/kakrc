# Set the colour scheme
colorscheme one-dark

# Width of a tab
set-option global tabstop 4

# Indent with 4 spaces
set-option global indentwidth 4

# Always keep one line and three columns displayed around the cursor
set-option global scrolloff 3,3

# Display the status bar on top
set-option global ui_options ncurses_status_on_top=true

# Display line numbers
add-highlighter global/ number-lines -hlcursor -relative

# Highlight trailing whitespace
add-highlighter global/ regex \h+$ 0:Error

# Softwrap long lines
add-highlighter global/ wrap -word -indent

# Clipboard management mappings
map -docstring "yank the selection into the clipboard" global user y "<a-|> wl-copy<ret>"
map -docstring "paste the clipboard" global user p "<a-!> wl-paste<ret>"

# Shortcut to quickly exit the editor
define-command -docstring "save and quit" x "write-all; quit"

# kakoune-table
map global user t ": evaluate-commands -draft table-align<ret>" -docstring "align the hovered table"
map global user T ": evaluate-commands -draft table-toggle<ret>" -docstring "toggle table user mode"

# kak-lsp
eval %sh{kak-lsp --kakoune --session "$kak_session"}  # Not needed if you load it with plug.kak.
lsp-enable

enable-auto-pairs

map global user l %{:enter-user-mode lsp<ret>} -docstring "LSP mode"

map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'

map global object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object f '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
map global object t '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
map global object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'

map global normal <C-s> ':w<ret>' -docstring 'save'
map global insert <C-s> '<esc>:w<ret>i' -docstring 'save'

map global user s ':surround<ret>' -docstring "surround selection"
map global user S ':change-surround<ret>' -docstring "Change the nearest surrounding selection"

map global user w '%|fmt -w 80<ret>' -docstring "format the documetn"

hook -group lsp-filetype-typst global BufSetOption filetype=typst %{
    set-option buffer lsp_servers %{
        [tinymist]
        root_globs = [".git", ".hg"]
        args = ["lsp"]
        settings_section = "_"
        [tinymist.settings._]
        # See https://myriad-dreamin.github.io/tinymist/configurations.html
        exportPdf = "onDocumentHasTitle"
        formatterMode = "typstyle"
        previewFeature = "disable"
    }
    set-option -add buffer lsp_servers "formatterPrintWidth = %opt{autowrap_column}"
}


map global user '/' /(?i) -docstring "case incensitive search"
